#!/usr/bin/env python3
"""
LLM to Speech Converter

This script converts text generated by Anthropic's Claude API to speech using ElevenLabs.
It requires API keys for both services and can process voice files for transcription and voice cloning.
"""

import os
import argparse
from typing import Optional
import anthropic
from dotenv import load_dotenv
from voice_processor import VoiceProcessor

# Load environment variables from .env file
load_dotenv()

# Get API keys from environment variables
ANTHROPIC_API_KEY = os.getenv("ANTHROPIC_API_KEY")


def get_llm_response(prompt: str, model: str = "claude-3-opus-20240229") -> str:
    """
    Get a response from Anthropic's Claude API.
    
    Args:
        prompt: The user prompt to send to the LLM
        model: The model to use (default: claude-3-opus-20240229)
        
    Returns:
        The text response from the LLM
    """
    if not ANTHROPIC_API_KEY:
        raise ValueError("Anthropic API key not found. Please set ANTHROPIC_API_KEY environment variable.")
    
    client = anthropic.Anthropic(api_key=ANTHROPIC_API_KEY)
    
    message = client.messages.create(
        model=model,
        max_tokens=1024,
        temperature=0.7,
        system="You are a helpful assistant that provides concise and informative responses.",
        messages=[
            {"role": "user", "content": prompt}
        ]
    )
    
    return message.content[0].text


def main():
    """Main function to run the LLM to speech pipeline."""
    parser = argparse.ArgumentParser(description="Voice processing, LLM, and speech generation tool")
    
    # Create subparsers for different commands
    subparsers = parser.add_subparsers(dest="command", help="Command to execute")
    
    # LLM to speech command
    llm_parser = subparsers.add_parser("llm", help="Convert LLM responses to speech")
    llm_parser.add_argument("--prompt", type=str, help="Prompt to send to the LLM")
    llm_parser.add_argument("--model", type=str, default="claude-3-opus-20240229", 
                        help="Anthropic model to use")
    llm_parser.add_argument("--voice", type=str, default="Adam", 
                        help="ElevenLabs voice to use")
    llm_parser.add_argument("--save", type=str, help="Path to save the audio file")
    llm_parser.add_argument("--interactive", action="store_true", 
                        help="Run in interactive mode")
    
    # Speech to text command
    stt_parser = subparsers.add_parser("transcribe", help="Transcribe speech from an audio file")
    stt_parser.add_argument("--file", type=str, required=True, help="Path to the audio file")
    stt_parser.add_argument("--save", type=str, help="Path to save the transcription")
    
    # Voice cloning command
    clone_parser = subparsers.add_parser("clone", help="Clone a voice from an audio file")
    clone_parser.add_argument("--file", type=str, required=True, help="Path to the audio file")
    clone_parser.add_argument("--name", type=str, required=True, help="Name for the cloned voice")
    clone_parser.add_argument("--description", type=str, help="Description for the cloned voice")
    clone_parser.add_argument("--remove-noise", action="store_true", help="Remove background noise from samples")
    
    # Text to speech with cloned voice command
    tts_parser = subparsers.add_parser("speak", help="Convert text to speech with a voice")
    tts_parser.add_argument("--text", type=str, help="Text to convert to speech")
    tts_parser.add_argument("--file", type=str, help="File containing text to convert to speech")
    tts_parser.add_argument("--voice", type=str, required=True, help="Voice name to use")
    tts_parser.add_argument("--save", type=str, help="Path to save the audio file")
    
    args = parser.parse_args()
    
    # Initialize the voice processor
    try:
        voice_processor = VoiceProcessor()
    except ValueError as e:
        print(f"Error initializing voice processor: {e}")
        return
    
    # Handle different commands
    if args.command == "llm":
        if args.interactive:
            while True:
                prompt = input("\nEnter your prompt (or 'exit' to quit): ")
                if prompt.lower() == 'exit':
                    break
                    
                print("Getting response from Claude...")
                try:
                    response = get_llm_response(prompt, args.model)
                    print(f"\nClaude's response:\n{response}\n")
                    
                    print("Converting to speech...")
                    audio = voice_processor.text_to_speech(response, voice_name=args.voice, save_path=args.save)
                    if audio:
                        voice_processor.play_audio(audio)
                    
                except Exception as e:
                    print(f"Error: {e}")
        
        elif args.prompt:
            try:
                response = get_llm_response(args.prompt, args.model)
                print(f"\nClaude's response:\n{response}\n")
                
                audio = voice_processor.text_to_speech(response, voice_name=args.voice, save_path=args.save)
                if audio:
                    voice_processor.play_audio(audio)
                
            except Exception as e:
                print(f"Error: {e}")
        
        else:
            llm_parser.print_help()
    
    elif args.command == "transcribe":
        try:
            text = voice_processor.speech_to_text(args.file)
            print(f"\nTranscription:\n{text}\n")
            
            if args.save:
                with open(args.save, "w") as f:
                    f.write(text)
                print(f"Transcription saved to {args.save}")
                
        except Exception as e:
            print(f"Error: {e}")
    
    elif args.command == "clone":
        try:
            voice_id = voice_processor.clone_voice(
                args.file, 
                args.name,
                description=args.description,
                remove_background_noise=args.remove_noise
            )
            print(f"Voice cloned successfully with ID: {voice_id}")
                
        except Exception as e:
            print(f"Error: {e}")
    
    elif args.command == "speak":
        try:
            text = None
            if args.text:
                text = args.text
            elif args.file:
                with open(args.file, "r") as f:
                    text = f.read()
            else:
                print("Either --text or --file must be provided")
                return
            
            audio = voice_processor.text_to_speech(text, voice_name=args.voice, save_path=args.save)
            if audio:
                voice_processor.play_audio(audio)
                
        except Exception as e:
            print(f"Error: {e}")
    
    else:
        parser.print_help()


if __name__ == "__main__":
    main()
